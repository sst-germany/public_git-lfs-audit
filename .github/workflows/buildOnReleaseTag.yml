name: Build OnReleaseTag [releases/v*]

on:
  workflow_dispatch: # manuell starten
  create:
    tags:
      - 'releases/v*' # wenn ein Tag erstellt wird, der mit folgendem Namen beginnt.

env:
  Cfg_OutDirectory: ${{ github.workspace }}\git-lfs-audit\bin\Release\net8.0
                                        
jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Repository auschecken.
        uses: actions/checkout@v4
        with:
         lfs: true

      # Version: Tag & File
      - name: VERSION.md mit TAG vergleichen.
        if: ${{ github.event_name == 'create' }} # Nur bei Tag ausführen, da wir ja gegen einen Tag prüfen.
        uses: sst-germany/actions_CompareVersionMdWithTag@main

      # Setup
      - name: MSBuild (setup path).
        uses: microsoft/setup-msbuild@v2

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x  # deine Version

      # NuGet installieren
      - name: Setup NuGet
        uses: NuGet/setup-nuget@v1
        with:
          nuget-version: 'latest'

      # Restore
      - name: Restore
        run: dotnet restore

      # Build
      - name: Build
        run: dotnet build -c Release 

      # Pack
      - name: Pack
        run: dotnet pack -c Release --no-build --output .\.nuget

      # Version: Tag, File & Assembly
      - name: Assembly-Version mit VERSION.md und TAG vergleichen.
        if: ${{ github.event_name == 'create' }} # Nur bei Tag ausführen, da wir ja gegen einen Tag prüfen.
        id: versioncheck
        uses: sst-germany/actions_CompareAssemblyWithVersionMdAndTag@main
        with:
          assemblypath: ${{ env.Cfg_OutDirectory }}\git-lfs-audit.dll

      # NuGet
      - name: Alle NuGet-Pakete auflisten.
        run: Get-ChildItem ".\.nuget"

      # Paket auf nuget.org veröffentlichen
      - name: Publish
        run: |
          dotnet nuget push .\.nuget\*.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json
